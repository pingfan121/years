using System.Collections.Generic;using System.Collections;using GameLib.game;using GameServer.Define.EnumNormal;namespace GameDb.Data{	public class TbDataMission{		/**		* id		*/		public int Id;		/**		* 类型		*/		public int Type;		/**		* 转生等级		*/		public int ReLevelLimit;		/**		* 等级		*/		public int LevelLimit;		/**		* 前置ID		*/		public int LastID;		/**		* 后续ID		*/		public int NextID;		/**		* 条件类型		*/		public int[] ConditionType;		/**		* 计数		*/		public int[] CheckCount;		/**		* 比对ID		*/		public int[] CheckID;		/**		* 物品ID(通用)		*/		public int[] ItemBaseID;		/**		* 物品数量(通用)		*/		public int[] ItemCount;		/**		* 物品ID(男战士)		*/		public int[] ZhanMaleID;		/**		* 物品ID(女战士)		*/		public int[] ZhanFemaleID;		/**		* 物品ID(男法师)		*/		public int[] FaMaleID;		/**		* 物品ID(女法师)		*/		public int[] FaFemaleID;		/**		* 物品ID(男道士)		*/		public int[] DaoMaleID;		/**		* 物品ID(女道士)		*/		public int[] DaoFemaleID;		/**		* 经验		*/		public int Exp;		/**		* 功勋		*/		public int GongXun;		/**		* 魔魂		*/		public int MoHun;		/**		* 金币		*/		public int AwardGoldFree;		/**		* 绑定金币		*/		public int AwardGoldBind;		/**		* 元宝		*/		public int AwardVipPointFree;		/**		* 绑定元宝		*/		public int AwardVipPointBind;		/**		* 名称		*/		public string Name;		/**		* 接取npcID		*/		public int NpcID;		/**		* 完成npc		*/		public int Endnpc;		/**		* 传送点ID		*/		public string[] TeleportID;		/**		* 辅助目标ID		*/		public int[] AssistTargetID;		/**		* 推荐功能显示		*/		public string[] FuncShow;		/**		* 推荐功能类型		*/		public int[] FuncType;		/**		* 推荐功能参数		*/		public int[] FuncArge;		/**		* 接受任务时是否提示传送		*/		public bool AcceptTransfer;		/**		* 可完成任务时是否提示传送		*/		public bool CanSubmitTransfer;		/**		* 任务开启对话		*/		public string Dialog;		/**		* 任务完成对话		*/		public string Enddialog;		/**		* 任务描述		*/		public string Desc;		/**		* 任务接受或正在进行时精灵对话		*/		public string AcceptSpriteDialog;		/**		* 任务可提交时精灵对话		*/		public string SubmitSpriteDialog;		/**		* 任务接受时是否自动做任务		*/		public int AutoDoWhenAccept;		/**		* 任务可提交时是否自动做任务		*/		public int AutoDoWhenCanSubmit;		/**		* 任务接受时是否自动显示引导		*/		public int ShowAcceptGuide;		/**		* 任务接受或正在进行时引导文本		*/		public string AcceptGuideText;		/**		* 任务可提交时引导文本		*/		public string SubmitGuideText;		/**		* 关闭任务面板时是否自动提交		*/		public int SubmitWhenClose;		/**		* 空闲时是否自动做任务		*/		public int AutoDoWhenIdle;		/**		* 任务可提交时是否指引传送按钮		*/		public int SubmitTransferEffect;		/**		* 任务完成面板打开时是否自动交任务		*/		public int AutoSubmitWhenDialogOpen;		/**		* 任务接受执行客户端功能ID		*/		public int AcceptClientFunctionId;		/**		* 任务接受执行客户端功能参数		*/		public string[] AcceptClientFunctionParams;		/**		* 任务完成执行客户端功能ID		*/		public int SubmitClientFunctionId;		/**		* 任务完成执行客户端功能参数		*/		public string[] SubmitClientFunctionParams;		/**		* 任务剧情显示		*/		public int ShowPlot;		/**		* 任务剧情描述		*/		public string Plot;		static public Dictionary<int, TbDataMission> temples=new Dictionary<int,TbDataMission>();		static public void initdata(Dictionary<int,Hashtable> table){			foreach(Hashtable tb in table.Values){			try{				TbDataMission tp=new TbDataMission();				temples[(int)tb["Id"]] = tp;				tp.Id=(int)tb["Id"];				tp.Type=(int)tb["Type"];				tp.ReLevelLimit=(int)tb["ReLevelLimit"];				tp.LevelLimit=(int)tb["LevelLimit"];				tp.LastID=(int)tb["LastID"];				tp.NextID=(int)tb["NextID"];				tp.ConditionType=(int[])tb["ConditionType"];				tp.CheckCount=(int[])tb["CheckCount"];				tp.CheckID=(int[])tb["CheckID"];				tp.ItemBaseID=(int[])tb["ItemBaseID"];				tp.ItemCount=(int[])tb["ItemCount"];				tp.ZhanMaleID=(int[])tb["ZhanMaleID"];				tp.ZhanFemaleID=(int[])tb["ZhanFemaleID"];				tp.FaMaleID=(int[])tb["FaMaleID"];				tp.FaFemaleID=(int[])tb["FaFemaleID"];				tp.DaoMaleID=(int[])tb["DaoMaleID"];				tp.DaoFemaleID=(int[])tb["DaoFemaleID"];				tp.Exp=(int)tb["Exp"];				tp.GongXun=(int)tb["GongXun"];				tp.MoHun=(int)tb["MoHun"];				tp.AwardGoldFree=(int)tb["AwardGoldFree"];				tp.AwardGoldBind=(int)tb["AwardGoldBind"];				tp.AwardVipPointFree=(int)tb["AwardVipPointFree"];				tp.AwardVipPointBind=(int)tb["AwardVipPointBind"];				tp.Name=(string)tb["Name"];				tp.NpcID=(int)tb["NpcID"];				tp.Endnpc=(int)tb["Endnpc"];				tp.TeleportID=(string[])tb["TeleportID"];				tp.AssistTargetID=(int[])tb["AssistTargetID"];				tp.FuncShow=(string[])tb["FuncShow"];				tp.FuncType=(int[])tb["FuncType"];				tp.FuncArge=(int[])tb["FuncArge"];				tp.AcceptTransfer=(bool)tb["AcceptTransfer"];				tp.CanSubmitTransfer=(bool)tb["CanSubmitTransfer"];				tp.Dialog=(string)tb["Dialog"];				tp.Enddialog=(string)tb["Enddialog"];				tp.Desc=(string)tb["Desc"];				tp.AcceptSpriteDialog=(string)tb["AcceptSpriteDialog"];				tp.SubmitSpriteDialog=(string)tb["SubmitSpriteDialog"];				tp.AutoDoWhenAccept=(int)tb["AutoDoWhenAccept"];				tp.AutoDoWhenCanSubmit=(int)tb["AutoDoWhenCanSubmit"];				tp.ShowAcceptGuide=(int)tb["ShowAcceptGuide"];				tp.AcceptGuideText=(string)tb["AcceptGuideText"];				tp.SubmitGuideText=(string)tb["SubmitGuideText"];				tp.SubmitWhenClose=(int)tb["SubmitWhenClose"];				tp.AutoDoWhenIdle=(int)tb["AutoDoWhenIdle"];				tp.SubmitTransferEffect=(int)tb["SubmitTransferEffect"];				tp.AutoSubmitWhenDialogOpen=(int)tb["AutoSubmitWhenDialogOpen"];				tp.AcceptClientFunctionId=(int)tb["AcceptClientFunctionId"];				tp.AcceptClientFunctionParams=(string[])tb["AcceptClientFunctionParams"];				tp.SubmitClientFunctionId=(int)tb["SubmitClientFunctionId"];				tp.SubmitClientFunctionParams=(string[])tb["SubmitClientFunctionParams"];				tp.ShowPlot=(int)tb["ShowPlot"];				tp.Plot=(string)tb["Plot"];			}catch(System.Exception ee){				System.Console.WriteLine(ee);			}			}		}	static public TbDataMission select(int id) {		if (temples.ContainsKey(id)) {			return temples[id];		}		return null;	}	}}